package com.example.projectend.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * PROFILE CONTROLLER - Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n v√† ƒë∆°n h√†ng
 * Ng∆∞·ªùi 1 - Database Design & Backend Core ‚úÖ ƒê√É HO√ÄN TH√ÄNH (C·∫•u tr√∫c c∆° b·∫£n)
 * Ng∆∞·ªùi 4 - Order Management & Checkout üîÑ C·∫¶N HO√ÄN THI·ªÜN
 * <p>
 * ========================================
 * TODO NG∆Ø·ªúI 4 - DANH S√ÅCH CHI TI·∫æT:
 * ========================================
 * <p>
 * B∆Ø·ªöC 1: Inject Services c·∫ßn thi·∫øt
 *
 * @Autowired private TaiKhoanService taiKhoanService;
 * @Autowired private DonHangService donHangService;
 * @Autowired private DiaChiService diaChiService;
 * <p>
 * B∆Ø·ªöC 2: Ho√†n thi·ªán method profile() - hi·ªÉn th·ªã th√¥ng tin & l·ªãch s·ª≠ ƒë∆°n h√†ng
 * B∆Ø·ªöC 3: T·∫°o method updateProfile() - c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
 * B∆Ø·ªöC 4: T·∫°o method changePassword() - ƒë·ªïi m·∫≠t kh·∫©u
 * B∆Ø·ªöC 5: T·∫°o method orderDetail() - xem chi ti·∫øt ƒë∆°n h√†ng
 * B∆Ø·ªöC 6: C·∫≠p nh·∫≠t template profile.html v·ªõi tabs
 */
@Controller
public class ProfileController {

    // TODO NG∆Ø·ªúI 4: Inject c√°c service sau khi ƒë√£ t·∫°o
    // @Autowired private TaiKhoanService taiKhoanService;
    // @Autowired private DonHangService donHangService;
    // @Autowired private DiaChiService diaChiService;

    // Trang th√¥ng tin c√° nh√¢n v·ªõi l·ªãch s·ª≠ ƒë∆°n h√†ng
    @GetMapping("/profile")
    public String profile(Model model, Principal principal) {
        model.addAttribute("currentPage", "profile");

        // TODO NG∆Ø·ªúI 4: Th√™m logic sau khi c√≥ service
        // if (principal != null) {
        //     TaiKhoan taiKhoan = taiKhoanService.findByEmail(principal.getName());
        //     model.addAttribute("taiKhoan", taiKhoan);
        //
        //     // L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa user (ph√¢n trang)
        //     Page<DonHang> donHangPage = donHangService.getDonHangByKhachHang(taiKhoan, PageRequest.of(0, 10));
        //     model.addAttribute("donHangPage", donHangPage);
        //
        //     // L·∫•y ƒë·ªãa ch·ªâ giao h√†ng
        //     List<DiaChi> diaChiList = diaChiService.getDiaChiByTaiKhoan(taiKhoan);
        //     model.addAttribute("diaChiList", diaChiList);
        // }

        // Breadcrumb
        Map<String, String> breadcrumbItem = new HashMap<>();
        breadcrumbItem.put("name", "Th√¥ng tin c√° nh√¢n");
        breadcrumbItem.put("url", null);
        List<Map<String, String>> breadcrumbItems = List.of(breadcrumbItem);
        model.addAttribute("breadcrumbItems", breadcrumbItems);

        model.addAttribute("pageTitle", "Th√¥ng tin c√° nh√¢n - C·ª≠a h√†ng ƒë·ªì T·∫øt");
        return "profile";
    }

    // TODO NG∆Ø·ªúI 4: C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
    @PostMapping("/profile/update")
    public String updateProfile(
            @RequestParam String hoTen,
            @RequestParam String soDienThoai,
            Principal principal,
            RedirectAttributes redirectAttributes) {

        // TODO NG∆Ø·ªúI 4: Implement logic
        // try {
        //     TaiKhoan taiKhoan = taiKhoanService.findByEmail(principal.getName());
        //     taiKhoan.setHoTen(hoTen);
        //     taiKhoan.setSoDienThoai(soDienThoai);
        //
        //     taiKhoanService.save(taiKhoan);
        //     redirectAttributes.addFlashAttribute("success", "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
        // } catch (Exception e) {
        //     redirectAttributes.addFlashAttribute("error", "C√≥ l·ªói x·∫£y ra: " + e.getMessage());
        // }

        return "redirect:/profile";
    }

    // TODO NG∆Ø·ªúI 4: ƒê·ªïi m·∫≠t kh·∫©u
    @PostMapping("/profile/change-password")
    public String changePassword(
            @RequestParam String currentPassword,
            @RequestParam String newPassword,
            @RequestParam String confirmPassword,
            Principal principal,
            RedirectAttributes redirectAttributes) {

        // TODO NG∆Ø·ªúI 4: Implement logic
        // try {
        //     if (!newPassword.equals(confirmPassword)) {
        //         redirectAttributes.addFlashAttribute("error", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
        //         return "redirect:/profile";
        //     }
        //
        //     TaiKhoan taiKhoan = taiKhoanService.findByEmail(principal.getName());
        //
        //     // Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i (plain text cho ASM)
        //     if (!currentPassword.equals(taiKhoan.getMatKhau())) {
        //         redirectAttributes.addFlashAttribute("error", "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng!");
        //         return "redirect:/profile";
        //     }
        //
        //     taiKhoan.setMatKhau(newPassword);
        //     taiKhoanService.save(taiKhoan);
        //
        //     redirectAttributes.addFlashAttribute("success", "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
        // } catch (Exception e) {
        //     redirectAttributes.addFlashAttribute("error", "C√≥ l·ªói x·∫£y ra: " + e.getMessage());
        // }

        return "redirect:/profile";
    }

    // TODO NG∆Ø·ªúI 4: Chi ti·∫øt ƒë∆°n h√†ng
    @GetMapping("/profile/orders/{id}")
    public String orderDetail(@PathVariable Integer id, Model model, Principal principal) {

        // TODO NG∆Ø·ªúI 4: Implement logic
        // try {
        //     TaiKhoan taiKhoan = taiKhoanService.findByEmail(principal.getName());
        //     Optional<DonHang> donHangOpt = donHangService.findByIdAndKhachHang(id, taiKhoan);
        //
        //     if (donHangOpt.isEmpty()) {
        //         return "redirect:/profile?notfound";
        //     }
        //
        //     DonHang donHang = donHangOpt.get();
        //     model.addAttribute("donHang", donHang);
        //
        //     // L·∫•y chi ti·∫øt ƒë∆°n h√†ng
        //     List<DonHangChiTiet> chiTietList = donHangService.getChiTietDonHang(donHang);
        //     model.addAttribute("chiTietList", chiTietList);
        // } catch (Exception e) {
        //     return "redirect:/profile?error";
        // }

        // Breadcrumb
        Map<String, String> breadcrumb1 = new HashMap<>();
        breadcrumb1.put("name", "Th√¥ng tin c√° nh√¢n");
        breadcrumb1.put("url", "/profile");

        Map<String, String> breadcrumb2 = new HashMap<>();
        breadcrumb2.put("name", "Chi ti·∫øt ƒë∆°n h√†ng");
        breadcrumb2.put("url", null);

        List<Map<String, String>> breadcrumbItems = List.of(breadcrumb1, breadcrumb2);
        model.addAttribute("breadcrumbItems", breadcrumbItems);

        model.addAttribute("currentPage", "profile");
        model.addAttribute("pageTitle", "Chi ti·∫øt ƒë∆°n h√†ng - C·ª≠a h√†ng ƒë·ªì T·∫øt");
        return "order-detail";
    }

    // TODO NG∆Ø·ªúI 4: H·ªßy ƒë∆°n h√†ng (ch·ªâ khi ch∆∞a giao)
    @PostMapping("/profile/orders/{id}/cancel")
    public String cancelOrder(@PathVariable Integer id, Principal principal, RedirectAttributes redirectAttributes) {

        // TODO NG∆Ø·ªúI 4: Implement logic
        // try {
        //     TaiKhoan taiKhoan = taiKhoanService.findByEmail(principal.getName());
        //     boolean success = donHangService.cancelOrder(id, taiKhoan);
        //
        //     if (success) {
        //         redirectAttributes.addFlashAttribute("success", "H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng!");
        //     } else {
        //         redirectAttributes.addFlashAttribute("error", "Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng n√†y!");
        //     }
        // } catch (Exception e) {
        //     redirectAttributes.addFlashAttribute("error", "C√≥ l·ªói x·∫£y ra: " + e.getMessage());
        // }

        return "redirect:/profile";
    }
}
