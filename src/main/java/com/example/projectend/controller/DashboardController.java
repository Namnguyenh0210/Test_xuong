package com.example.projectend.controller;

import com.example.projectend.entity.BaiViet;
import com.example.projectend.entity.TaiKhoan;
import com.example.projectend.service.BaiVietService;
import com.example.projectend.service.DanhGiaService;
import com.example.projectend.service.TaiKhoanService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.security.Principal;
import java.util.Optional;

/**
 * DASHBOARD CONTROLLER - Trang qu·∫£n l√Ω admin
 * Ng∆∞·ªùi 1 - Database Design & Backend Core ‚úÖ ƒê√É HO√ÄN TH√ÄNH (C·∫•u tr√∫c c∆° b·∫£n)
 * Ng∆∞·ªùi 2 - Authentication & Security ‚úÖ ƒê√É HO√ÄN TH√ÄNH (Security config)
 * Ng∆∞·ªùi 5 - Admin Dashboard & Reports üîÑ C·∫¶N HO√ÄN THI·ªÜN
 * <p>
 * ========================================
 * TODO NG∆Ø·ªúI 5 - DANH S√ÅCH CHI TI·∫æT:
 * ========================================
 * <p>
 * B∆Ø·ªöC 1: T·∫°o c√°c service c√≤n thi·∫øu (SanPhamService, DonHangService, v.v.)
 * B∆Ø·ªöC 2: Ho√†n thi·ªán Dashboard ch√≠nh v·ªõi th·ªëng k√™
 * B∆Ø·ªöC 3: Ho√†n thi·ªán CRUD qu·∫£n l√Ω ƒë∆°n h√†ng v·ªõi filter tr·∫°ng th√°i
 * B∆Ø·ªöC 4: T·∫°o trang b√°o c√°o th·ªëng k√™ v·ªõi charts
 * B∆Ø·ªöC 5: Th√™m t√≠nh nƒÉng export Excel/PDF
 * B∆Ø·ªöC 6: T·∫°o c√°c template admin v·ªõi DataTables
 * B∆Ø·ªöC 7: Th√™m real-time notifications cho ƒë∆°n h√†ng m·ªõi
 */
@Controller
@RequestMapping("/admin")
@PreAuthorize("hasRole('ADMIN') or hasRole('NHANVIEN')")
public class DashboardController {

    @Autowired
    private TaiKhoanService taiKhoanService;

    // TODO NG∆Ø·ªúI 5: T·∫°o c√°c service n√†y
    // @Autowired private SanPhamService sanPhamService;
    // @Autowired private DonHangService donHangService;

    @Autowired
    private BaiVietService baiVietService;

    @Autowired
    private DanhGiaService danhGiaService;

    // TODO NG∆Ø·ªúI 5: Inject th√™m service c·∫ßn thi·∫øt
    // @Autowired private ThongKeService thongKeService;
    // @Autowired private AdminService adminService;

    // Dashboard ch√≠nh v·ªõi th·ªëng k√™ t·ªïng quan
    @GetMapping("")
    public String dashboard(Model model) {

        // TODO NG∆Ø·ªúI 5: Sau khi t·∫°o c√°c service, uncomment c√°c d√≤ng d∆∞·ªõi
        // Th·ªëng k√™ c∆° b·∫£n
        // model.addAttribute("totalUsers", taiKhoanService.countByVaiTro("Kh√°ch h√†ng"));
        // model.addAttribute("totalProducts", sanPhamService.countAll());
        // model.addAttribute("totalOrders", donHangService.countAll());
        model.addAttribute("totalPosts", baiVietService.countActivePosts());

        // TODO NG∆Ø·ªúI 5: Th√™m th·ªëng k√™ n√¢ng cao
        // LocalDate today = LocalDate.now();
        // LocalDate startOfWeek = today.with(DayOfWeek.MONDAY);
        // LocalDate startOfMonth = today.withDayOfMonth(1);

        // BigDecimal doanhThuHomNay = thongKeService.getDoanhThuByDate(today);
        // BigDecimal doanhThuTuan = thongKeService.getDoanhThuBetweenDates(startOfWeek, today);
        // BigDecimal doanhThuThang = thongKeService.getDoanhThuBetweenDates(startOfMonth, today);

        // model.addAttribute("doanhThuHomNay", doanhThuHomNay);
        // model.addAttribute("doanhThuTuan", doanhThuTuan);
        // model.addAttribute("doanhThuThang", doanhThuThang);

        // // Top s·∫£n ph·∫©m b√°n ch·∫°y
        // List<Object[]> topProducts = thongKeService.getTopSellingProducts(5);
        // model.addAttribute("topProducts", topProducts);

        // // ƒê∆°n h√†ng m·ªõi c·∫ßn x·ª≠ l√Ω
        // List<DonHang> pendingOrders = donHangService.getPendingOrders(10);
        // model.addAttribute("pendingOrders", pendingOrders);

        // // D·ªØ li·ªáu cho chart doanh thu 7 ng√†y
        // List<Object[]> chartData = thongKeService.getRevenueChart7Days();
        // model.addAttribute("chartData", chartData);

        model.addAttribute("currentPage", "dashboard");
        model.addAttribute("pageTitle", "Dashboard - Qu·∫£n l√Ω c·ª≠a h√†ng");

        return "admin/dashboard";
    }

    // ========== QU·∫¢N L√ù B√ÄI VI·∫æT (ƒê√É HO√ÄN TH√ÄNH) ==========
    @GetMapping("/baiviet")
    public String quanLyBaiViet(@RequestParam(defaultValue = "0") int page,
                                @RequestParam(defaultValue = "10") int size,
                                Model model) {
        Pageable pageable = PageRequest.of(page, size);
        Page<BaiViet> baiVietPage = baiVietService.getAllBaiViet(pageable);

        model.addAttribute("baiVietPage", baiVietPage);
        model.addAttribute("currentPage", "baiviet");
        model.addAttribute("pageTitle", "Qu·∫£n l√Ω b√†i vi·∫øt");

        return "admin/baiviet/list";
    }

    @GetMapping("/baiviet/add")
    public String themBaiViet(Model model) {
        model.addAttribute("baiViet", new BaiViet());
        model.addAttribute("currentPage", "baiviet");
        model.addAttribute("pageTitle", "Th√™m b√†i vi·∫øt m·ªõi");

        return "admin/baiviet/form";
    }

    @PostMapping("/baiviet/save")
    public String luuBaiViet(@ModelAttribute BaiViet baiViet,
                             Principal principal,
                             RedirectAttributes redirectAttributes) {
        try {
            // L·∫•y t√†i kho·∫£n hi·ªán t·∫°i
            TaiKhoan taiKhoan = taiKhoanService.findByEmail(principal.getName());
            baiViet.setTaiKhoan(taiKhoan);

            baiVietService.save(baiViet);
            redirectAttributes.addFlashAttribute("success", "L∆∞u b√†i vi·∫øt th√†nh c√¥ng!");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "C√≥ l·ªói x·∫£y ra: " + e.getMessage());
        }

        return "redirect:/admin/baiviet";
    }

    @GetMapping("/baiviet/edit/{id}")
    public String suaBaiViet(@PathVariable Integer id, Model model) {
        Optional<BaiViet> baiVietOpt = baiVietService.findById(id);
        if (baiVietOpt.isEmpty()) {
            return "redirect:/admin/baiviet?notfound";
        }

        model.addAttribute("baiViet", baiVietOpt.get());
        model.addAttribute("currentPage", "baiviet");
        model.addAttribute("pageTitle", "S·ª≠a b√†i vi·∫øt");

        return "admin/baiviet/form";
    }

    @PostMapping("/baiviet/delete/{id}")
    public String xoaBaiViet(@PathVariable Integer id, RedirectAttributes redirectAttributes) {
        try {
            baiVietService.deleteById(id);
            redirectAttributes.addFlashAttribute("success", "X√≥a b√†i vi·∫øt th√†nh c√¥ng!");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Kh√¥ng th·ªÉ x√≥a b√†i vi·∫øt: " + e.getMessage());
        }

        return "redirect:/admin/baiviet";
    }

    // ========== QU·∫¢N L√ù ƒê√ÅNH GI√Å (ƒê√É HO√ÄN TH√ÄNH) ==========
    @GetMapping("/danhgia")
    public String quanLyDanhGia(@RequestParam(defaultValue = "0") int page,
                                @RequestParam(defaultValue = "10") int size,
                                Model model) {
        // TODO NG∆Ø·ªúI 5: Implement pagination for all reviews
        model.addAttribute("currentPage", "danhgia");
        model.addAttribute("pageTitle", "Qu·∫£n l√Ω ƒë√°nh gi√°");

        return "admin/danhgia/list";
    }

    @PostMapping("/danhgia/delete/{id}")
    public String xoaDanhGia(@PathVariable Integer id, RedirectAttributes redirectAttributes) {
        try {
            danhGiaService.deleteById(id);
            redirectAttributes.addFlashAttribute("success", "X√≥a ƒë√°nh gi√° th√†nh c√¥ng!");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Kh√¥ng th·ªÉ x√≥a ƒë√°nh gi√°: " + e.getMessage());
        }

        return "redirect:/admin/danhgia";
    }

    // ========== TH·ªêNG K√ä ==========
    @GetMapping("/thongke")
    public String thongKe(Model model) {
        // TODO NG∆Ø·ªúI 5: Implement statistics dashboard
        model.addAttribute("currentPage", "thongke");
        model.addAttribute("pageTitle", "Th·ªëng k√™");

        return "admin/thongke";
    }

    // TODO NG∆Ø·ªúI 5: C√ÅC CH·ª®C NƒÇNG C·∫¶N HO√ÄN THI·ªÜN
    // 1. Qu·∫£n l√Ω t√†i kho·∫£n (CRUD)
    // 2. Qu·∫£n l√Ω s·∫£n ph·∫©m (CRUD)
    // 3. Qu·∫£n l√Ω ƒë∆°n h√†ng v·ªõi filter n√¢ng cao
    // 4. B√°o c√°o th·ªëng k√™ v·ªõi charts
    // 5. Export Excel/PDF
    // 6. C√†i ƒë·∫∑t h·ªá th·ªëng
}
